

# Puncuation list is taken from the list the App Engine search
# API used: https://cloud.google.com/appengine/docs/standard/python/search

PUNCTUATION = {
    "!", '"', "%", "(", ")", "*", ",", "-", "|", "/",
    "[", "]", "^", "`", ":", "=", ">", "?", "@", "{",
    "}", "~", "$"
}

# These are the English stopwords generated by nltk. Ideally
# we'd use nltk directly, but that involves some mechanism of
# downloading/shipping the nltk data files. That's something
# for the future.
STOP_WORDS = [
    'i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves',
    'you', "you're", "you've", "you'll", "you'd", 'your', 'yours',
    'yourself', 'yourselves', 'he', 'him', 'his', 'himself', 'she',
    "she's", 'her', 'hers', 'herself', 'it', "it's", 'its', 'itself',
    'they', 'them', 'their', 'theirs', 'themselves', 'what', 'which',
    'who', 'whom', 'this', 'that', "that'll", 'these', 'those', 'am',
    'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has',
    'had', 'having', 'do', 'does', 'did', 'doing', 'a', 'an', 'the',
    'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while', 'of',
    'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into',
    'through', 'during', 'before', 'after', 'above', 'below', 'to',
    'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under',
    'again', 'further', 'then', 'once', 'here', 'there', 'when',
    'where', 'why', 'how', 'all', 'any', 'both', 'each', 'few',
    'more', 'most', 'other', 'some', 'such', 'no', 'nor', 'not',
    'only', 'own', 'same', 'so', 'than', 'too', 'very', 's', 't',
    'can', 'will', 'just', 'don', "don't", 'should', "should've",
    'now', 'd', 'll', 'm', 'o', 're', 've', 'y', 'ain', 'aren',
    "aren't", 'couldn', "couldn't", 'didn', "didn't", 'doesn',
    "doesn't", 'hadn', "hadn't", 'hasn', "hasn't", 'haven',
    "haven't", 'isn', "isn't", 'ma', 'mightn', "mightn't", 'mustn',
    "mustn't", 'needn', "needn't", 'shan', "shan't", 'shouldn',
    "shouldn't", 'wasn', "wasn't", 'weren', "weren't", 'won', "won't",
    'wouldn', "wouldn't"
]


class Field(object):
    def __init__(self, default=None, null=True):
        self.default = default
        self.null = null

    def normalize_value(self, value):
        # Default behaviour is to lower-case, remove punctuation
        # and then remove stop words

        if value is None:
            return None

        # Lower-case everything by default
        value = value.lower()

        # Normalize whitespace
        return " ".join(value.split())

    def tokenize_value(self, value):
        """
            Given a value set on a document, this
            returns a list of tokens that are indexed
        """
        if value is None:
            return value

        return value.split()  # Just split on whitespace, normalization would've done the work

    def clean_token(self, token):
        """
            Called on each token, if the token should be discarded,
            return None.
        """

        token = token.strip()  # Just in case
        if token in STOP_WORDS:
            return None  # Ignore stop words

        if token in PUNCTUATION:
            return None  # Ignore standalone punctuation

        # Remove + signs, unless they are trailing
        if "+" in token:
            plus_count = 0
            while token[-1] == "+":
                token = token[:-1]
                plus_count += 1

            token = token.replace("+", "") + ("+" * plus_count)

        if "#" in token:
            # Replace hashes unless it's a music note or programming language
            if len(token) > 2 or token[-1] != "#" or token[0] not in "abcdefgjx":
                token = token.replace("#", "")

        # Remove leading or trailing periods. In acronyms it's fine FIXME: handle "abs.dasd"
        token = token.strip(".")

        return token


class AtomField(Field):
    pass


class TextField(Field):
    pass


class DateTimeField(Field):
    pass


class NumberField(Field):
    pass


class Document(object):
    def __init__(self, **kwargs):
        self._data = kwargs.get("_document_data", None)

        self._fields = {}

        klass = type(self)

        for attr_name in dir(klass):
            attr = getattr(klass, attr_name)

            if isinstance(attr, Field):
                attr.attname = attr_name
                self._fields[attr_name] = attr

                # Apply any field values passed into the init
                if attr_name in kwargs:
                    setattr(self, attr_name, kwargs[attr_name])
                else:
                    # Set default if there was no value
                    setattr(self, attr_name, attr.default)

    @property
    def id(self):
        return self._data.pk if self._data else None

    def _set_data(self, data):
        self._data = data

    def get_fields(self):
        return self._fields
